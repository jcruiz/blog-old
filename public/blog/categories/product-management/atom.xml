<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: product management | The Other Radio]]></title>
  <link href="http://jcruiz.co/blog/categories/product-management/atom.xml" rel="self"/>
  <link href="http://jcruiz.co/"/>
  <updated>2017-07-12T13:02:20-07:00</updated>
  <id>http://jcruiz.co/</id>
  <author>
    <name><![CDATA[Juan Camilo Ruiz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using JIRA for Product Development Cycles part 1]]></title>
    <link href="http://jcruiz.co/blog/2015/08/25/using-jira-for-product-development-flows-part-1/"/>
    <updated>2015-08-25T00:01:00-07:00</updated>
    <id>http://jcruiz.co/blog/2015/08/25/using-jira-for-product-development-flows-part-1</id>
    <content type="html"><![CDATA[<p><img src="https://www.atlassian.com/wac/software/jira/sectionWrap/0/column/0/imageBinary/jira_rbg_darkblue.svg" alt="" width="300px" /></p>

<p><a href="https://www.atlassian.com/software/jira">JIRA</a> is a popular tool for managing software product projects. In my role as Product I’ve been an active user of this tool as well as <a href="https://trello.com/">Trello</a>, <a href="https://www.pivotaltracker.com/">Pivotal Tracker</a> among others in the last few years and, have found different ways that these tools can be used for organizing our product development cycles. </p>

<p>The tools are only the channel used by the organization to have a central location where the engineering teams tracks product implementation tasks, level of effort, bugs and, escalations. At the same time, the Product team uses the tools to communicate current features that are implemented, prioritize new features, plan out new releases and even define product roadmaps.</p>

<p>But as with any tool, if you don’t proactively maintain the information, it quickly becomes outdated and easily forgotten. In this article I would like to describe how I’ve use JIRA as a Product within the software development lifecycle.
<!--more--></p>

<h2 id="jira-projects">JIRA Projects</h2>

<p>We created multiple JIRA projects for our product development that serve as layers or filters in which we would catalog all the different asks for the engineering team: from feature requests, to escalations, to bug fixes. We quickly understood that in order to maintain an organized engineering backlog, we needed to protected it at all cost. </p>

<p>For that, the engineering leaders and product team took the responsibility to manage the following buckets as described below:</p>

<h3 id="feature-requests---fr">Feature Requests - FR</h3>
<p><strong>Owner:</strong> Product team</p>

<p><strong>Purpose</strong>: The bucket where the product team receives and manages feature requests, enhancements, documentation issues, etc. After the product team evaluated and defined how to best address a given feature requests. We would either approve the feature request via a story or set of stories that go in the icebox or, we would decline the feature request.
Although we used JIRA,  in reality this project could be managed with a simpler and more friendly tool like Trello. You can get created and use tools that are easy to use by all the parts of the organization.</p>

<h3 id="icebox---ib">Icebox - IB</h3>
<p><strong>Owner:</strong> Product/Engineering</p>

<p><strong>Purpose:</strong> This project was used as a <a href="https://www.atlassian.com/agile/kanban">agile Kanban</a> board. Here,  product and engineering would place upcoming engineering work. Prior to sprint planning, each team made sure that the most important stories based on eachother’s priorities where registered and presented during sprint planning meeting. We had a dedicated column called (next sprint). Once the sprint backlog was defined we move all stories for the new sprint into the <strong>Active Sprint</strong> project.</p>

<h3 id="active-sprint---as">Active Sprint - AS</h3>
<p><strong>Owner:</strong> Product/Engineering</p>

<p><strong>Purpose:</strong>  This project can be setup either as a <a href="https://www.atlassian.com/agile/scrum">Scrum board</a> or a Kanban board. It contains the engineering tasks for the current sprint. The team worked to have real expectaions and whatever was in the sprint would gotten finished on the sprint. This particularly is a great exercise to keep a good team morale.</p>

<h3 id="escalations---esc">Escalations - ESC</h3>
<p><strong>Owner:</strong> Product/Engineering leads</p>

<p><strong>Purpose:</strong> The engineering team’s window to the outside world. A project used by everyone in the organization to register things that were “urgent” or that required attention from engineering. The product team and engineering leaders would triage the issues and requests. 
As part of the triage the owner would either gather more information, or create an escalation that could go directly into the current sprint (AS project) to be addressed immediately or go into the icebox (IB) to be consider for a future sprint.</p>

<h3 id="final-remarks">Final Remarks</h3>
<p>Remember that JIRA allows you to do bulk changes, which come really handy when moving things from project to project. Also, keep common guidelines that help to maintain consistency across multiple JIRA projects. For example: same components set, common labels, notation, etc.</p>

<p>And last but not least, <strong>purge your icebox</strong> often. It’s super easy to put things in but really hard to get them out. At the end everything will look as it’s important.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 The Year of Scrum...]]></title>
    <link href="http://jcruiz.co/blog/2015/02/26/2014-the-year-of-scrum-dot-dot-dot/"/>
    <updated>2015-02-26T02:12:00-08:00</updated>
    <id>http://jcruiz.co/blog/2015/02/26/2014-the-year-of-scrum-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>It’s been a while since my last post. With Q1 almost over, it was long overdue to have a new post out the door by now. I originally started this post at the end of 2014, but finally I was able to make the space to complete it and finally publish it.</p>

<p>2014 was a really interesting and enlightening year for my product management career.  It marked the year that I got fully exposed to the rollout of <a href="http:// en.wikipedia.org/wiki/Scrum_%28software_development%29">Scrum</a> at the organization that I currently work on, we started from scratch and now, a year later I realize how much progress we’ve made and how much it has helped me and my team to define good practices and processes on how we built software.
<!--more--></p>

<h2 id="why-did-we-chose-scrum">Why did we chose Scrum?</h2>
<p>After going through a tortuous project of re-architecting some of the major building blocks from our Platform, we touched bottom. Many things factored-in to make the perfect storm which had a big impact on the team’s morale and left us with many things that needed to be fixed at the end because the ask was too big.</p>

<p>One of my colleagues and good friend had prior experience with Scrum, he became the internal champion of Scrum and soon after our first scrum master. He made sure that not just the team and management were on board with the idea, but also, he made sure that we didn’t take the “easy” and short way of doing Scrum without the proper training. </p>

<blockquote>
  <p><em>Lesson No.1: Don’t take shortcuts, a lot of companies start with the wrong foot, yet by the time they realize, it’s already too late</em></p>
</blockquote>

<p>By the time we had training, the team was familiar with some of the basics principles from Scrum and even have had some <a href="https://www.scrum.org/scrumbut">“Scrum but”</a> sprints already. That in fact, helped us to make the most out of the training. But same as with the school, one thing is the theory and one thing is the practice…</p>

<blockquote>
  <p><em>Lesson No.2: Do the homework before defining processess, test the waters and take formal training. Come prepare and ask as many questions as possible</em></p>
</blockquote>

<h2 id="what-has-happened-a-year-later">What has happened a year later?</h2>
<p>In the same way that the whole process started organically, we as team started adapting Scrum to our organization, making all kinds of adjustments like: sprint duration, estimation, story points, how we run demos and retrospectives, definition of done, managing escalations…, and the list goes on and on.</p>

<p>Up until know we have what I consider a good practice that is the sum of all the different adjustments, some of which I mentioned above and that will always require to keep evolving. </p>

<p>The major aspects from our current Sprint process circle around the respect for the engineer’s time and the high cost associated with switching contexts. It puts a big responsibility on Product to make all the necessary due diligence required to define, scope and prioritize what goes into a Sprint. It’s build on transparency, knowledge sharing and keeping honest to ourselves acknowledging the areas of improvement and taking actions to correct what is going in the wrong direction and, excel those things that we are doing well so we can continue doing them.</p>

<blockquote>
  <p><em>Lesson No.3 There has to be a continuous improvement on processes and methods that lead to better results and higher team morale</em></p>
</blockquote>

<h2 id="what-are-the-major-challenges">What are the major challenges</h2>
<ul>
  <li>Releasing often and maintain momentum over features</li>
  <li>On Product: Keep a healthy backlog and prioritize in the best possible way in an ocean of requirements (<em>see this article: http://www.forbes.com/sites/kylewong/2015/02/13/your-startup-is-overwhelmed-with-product-requests-now-what/</em>)</li>
  <li>Pruning the icebox</li>
  <li>People over processes </li>
  <li>Develop further the role of the scrum master</li>
  <li>Releasing usable software</li>
  <li>Identifying the ROI associated with features</li>
</ul>

<h2 id="my-list-of-benefits-from-scrum">My list of Benefits from Scrum</h2>
<ul>
  <li>Streamlined and organized product development cycle</li>
  <li>Shared knowledge</li>
  <li>Clear definition of roles, </li>
  <li>Clear distinction of functions engineering vs product</li>
  <li>Constant collaboration</li>
  <li>Constant feedback recollection</li>
  <li>The art of prioritization</li>
  <li>Mastering JIRA</li>
  <li>Easier communication with other parts from the organization</li>
  <li>Getting things done</li>
  <li>Move the needle forward. </li>
</ul>

<p>Expect more shared opinions from the journey into the Product Management waters. </p>
]]></content>
  </entry>
  
</feed>
